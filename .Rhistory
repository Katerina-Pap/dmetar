color = "blue") + ylim(min, max) + ylab(paste("Effect Size (", as.character(lastline$studlab), ")", sep = "")) +
ggtitle(expression(Sorted~by~I^2)) + coord_flip() + theme_minimal() + theme(axis.title.y = element_blank(),
axis.title.x = element_text(color = "black", size = 12, face = "bold"),
axis.text.y = element_text(color = "black",size = 9 * text.scale), plot.title = element_text(face = "bold", hjust = 0.5),
axis.line.x = element_line(color = "black"),
axis.ticks.x = element_line(color = "black"), axis.text.x = element_text(color = "black", size = 9 * text.scale)) +
geom_rect(aes(ymin=plot.sum.lower, ymax=plot.sum.upper, xmin=0, xmax=Inf), alpha=0.08, fill="lightgreen", color=NA) +
geom_hline(yintercept = plot.sum.effect, color = "darkgreen", linetype="dotted", size=0.5) +
geom_point(shape = 15, size = 4.5, color = "grey") +
geom_linerange(size = 0.9) +
geom_pointrange(shape = 3, size = 0.3)
ggplot(sortdat.i2, aes(x = studlab, y = mean, ymin = lower, ymax = upper)) +
geom_text(aes(label = title.i2, y = Inf), parse = T, hjust = "inward", size = 3 * text.scale) + geom_hline(yintercept = 0,
color = "blue") + ylim(min, max) + ylab(paste("Effect Size (", as.character(lastline$studlab), ")", sep = "")) +
ggtitle(expression(Sorted~by~italic(I)^2)) + coord_flip() + theme_minimal() + theme(axis.title.y = element_blank(),
axis.title.x = element_text(color = "black", size = 12, face = "bold"),
axis.text.y = element_text(color = "black",size = 9 * text.scale), plot.title = element_text(face = "bold", hjust = 0.5),
axis.line.x = element_line(color = "black"),
axis.ticks.x = element_line(color = "black"), axis.text.x = element_text(color = "black", size = 9 * text.scale)) +
geom_rect(aes(ymin=plot.sum.lower, ymax=plot.sum.upper, xmin=0, xmax=Inf), alpha=0.08, fill="lightgreen", color=NA) +
geom_hline(yintercept = plot.sum.effect, color = "darkgreen", linetype="dotted", size=0.5) +
geom_point(shape = 15, size = 4.5, color = "grey") +
geom_linerange(size = 0.9) +
geom_pointrange(shape = 3, size = 0.3)
ggplot(sortdat.es, aes(x = studlab, y = mean, ymin = lower, ymax = upper)) +
geom_pointrange() +
geom_text(aes(label = paste(format(round(mean, 2), nsmall = 2), " [", format(round(lower, 2), nsmall = 2), ";", format(round(upper, 2), nsmall = 2), "] ", "; I2=", format(round(i2, 2), nsmall = 2), sep = ""), y = Inf), hjust = "inward", size = 2 * text.scale) +
geom_hline(yintercept = 0, color = "blue") + ylab(paste(ggtitl, " (", as.character(lastline$studlab), ")", sep = "")) +
ggtitle(paste("Sorted by", ggtitl)) +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank(), axis.title.x = element_text(color = "black", size = 12, face = "bold"), axis.text.y = element_text(color = "black", size = 9 * text.scale), plot.title = element_text(face = "bold", hjust = 0.5), axis.line.x = element_line(color = "black"), axis.ticks.x = element_line(color = "black"), axis.text.x = element_text(color = "black", size = 9 * text.scale)) +
scale_y_continuous(limits = c(min, max)) +
geom_rect(aes(ymin=plot.sum.lower, ymax=plot.sum.upper, xmin=0, xmax=Inf), alpha=0.08, fill="lightgreen", color=NA) +
geom_hline(yintercept = plot.sum.effect, color = "darkgreen", linetype="dotted", size=0.5) +
geom_pointrange()
ggtitl = as.character("Rate")
ggplot(sortdat.es, aes(x = studlab, y = mean, ymin = lower, ymax = upper)) +
geom_pointrange() +
geom_text(aes(label = paste(format(round(mean, 2), nsmall = 2), " [", format(round(lower, 2), nsmall = 2), ";", format(round(upper, 2), nsmall = 2), "] ", "; I2=", format(round(i2, 2), nsmall = 2), sep = ""), y = Inf), hjust = "inward", size = 2 * text.scale) +
geom_hline(yintercept = 0, color = "blue") + ylab(paste(ggtitl, " (", as.character(lastline$studlab), ")", sep = "")) +
ggtitle(paste("Sorted by", ggtitl)) +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank(), axis.title.x = element_text(color = "black", size = 12, face = "bold"), axis.text.y = element_text(color = "black", size = 9 * text.scale), plot.title = element_text(face = "bold", hjust = 0.5), axis.line.x = element_line(color = "black"), axis.ticks.x = element_line(color = "black"), axis.text.x = element_text(color = "black", size = 9 * text.scale)) +
scale_y_continuous(limits = c(min, max)) +
geom_rect(aes(ymin=plot.sum.lower, ymax=plot.sum.upper, xmin=0, xmax=Inf), alpha=0.08, fill="lightgreen", color=NA) +
geom_hline(yintercept = plot.sum.effect, color = "darkgreen", linetype="dotted", size=0.5) +
geom_pointrange()
ggplot(sortdat.es, aes(x = studlab, y = mean, ymin = lower, ymax = upper)) +
geom_text(aes(label = title.es, y = Inf), parse = T, hjust = "inward", size = 2 * text.scale) +
geom_hline(yintercept = 0, color = "blue") + ylab(paste(ggtitl, " (", as.character(lastline$studlab), ")", sep = "")) +
ggtitle(paste("Sorted by", ggtitl)) +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank(), axis.title.x = element_text(color = "black", size = 12, face = "bold"), axis.text.y = element_text(color = "black", size = 9 * text.scale), plot.title = element_text(face = "bold", hjust = 0.5), axis.line.x = element_line(color = "black"), axis.ticks.x = element_line(color = "black"), axis.text.x = element_text(color = "black", size = 9 * text.scale)) +
scale_y_continuous(limits = c(min, max)) +
geom_rect(aes(ymin=plot.sum.lower, ymax=plot.sum.upper, xmin=0, xmax=Inf), alpha=0.08, fill="lightgreen", color=NA) +
geom_hline(yintercept = plot.sum.effect, color = "darkgreen", linetype="dotted", size=0.5) +
geom_point(shape = 15, size = 4.5, color = "grey") +
geom_linerange(size = 0.9) +
geom_pointrange(shape = 3, size = 0.3)
ggplot(sortdat.es, aes(x = studlab, y = mean, ymin = lower, ymax = upper)) +
geom_text(aes(label = title.es, y = Inf), parse = T, hjust = "inward", size = 3 * text.scale) +
geom_hline(yintercept = 0, color = "blue") + ylab(paste(ggtitl, " (", as.character(lastline$studlab), ")", sep = "")) +
ggtitle(paste("Sorted by", ggtitl)) +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank(), axis.title.x = element_text(color = "black", size = 12, face = "bold"), axis.text.y = element_text(color = "black", size = 9 * text.scale), plot.title = element_text(face = "bold", hjust = 0.5), axis.line.x = element_line(color = "black"), axis.ticks.x = element_line(color = "black"), axis.text.x = element_text(color = "black", size = 9 * text.scale)) +
scale_y_continuous(limits = c(min, max)) +
geom_rect(aes(ymin=plot.sum.lower, ymax=plot.sum.upper, xmin=0, xmax=Inf), alpha=0.08, fill="lightgreen", color=NA) +
geom_hline(yintercept = plot.sum.effect, color = "darkgreen", linetype="dotted", size=0.5) +
geom_point(shape = 15, size = 4.5, color = "grey") +
geom_linerange(size = 0.9) +
geom_pointrange(shape = 3, size = 0.3)
ggplot(sortdat.i2, aes(x = studlab, y = mean, ymin = lower, ymax = upper)) +
geom_text(aes(label = title.i2, y = Inf), parse = T, hjust = "inward", size = 3 * text.scale) +
geom_hline(yintercept = 0, color = "blue") + ylab(paste(ggtitl, " (", as.character(lastline$studlab), ")", sep = "")) +
ggtitle(expresssion(Sorted~by~italic(I)^2)) +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank(), axis.title.x = element_text(color = "black", size = 12, face = "bold"), axis.text.y = element_text(color = "black", size = 9 * text.scale), plot.title = element_text(face = "bold", hjust = 0.5), axis.line.x = element_line(color = "black"), axis.ticks.x = element_line(color = "black"), axis.text.x = element_text(color = "black", size = 9 * text.scale)) +
scale_y_continuous(limits = c(min, max)) +
geom_rect(aes(ymin=plot.sum.lower, ymax=plot.sum.upper, xmin=0, xmax=Inf), alpha=0.08, fill="lightgreen", color=NA) +
geom_hline(yintercept = plot.sum.effect, color = "darkgreen", linetype="dotted", size=0.5) +
geom_point(shape = 15, size = 4.5, color = "grey") +
geom_linerange(size = 0.9) +
geom_pointrange(shape = 3, size = 0.3)
ggplot(sortdat.i2, aes(x = studlab, y = mean, ymin = lower, ymax = upper)) +
geom_text(aes(label = title.i2, y = Inf), parse = T, hjust = "inward", size = 3 * text.scale) +
geom_hline(yintercept = 0, color = "blue") + ylab(paste(ggtitl, " (", as.character(lastline$studlab), ")", sep = "")) +
ggtitle(expression(Sorted~by~italic(I)^2)) +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank(), axis.title.x = element_text(color = "black", size = 12, face = "bold"), axis.text.y = element_text(color = "black", size = 9 * text.scale), plot.title = element_text(face = "bold", hjust = 0.5), axis.line.x = element_line(color = "black"), axis.ticks.x = element_line(color = "black"), axis.text.x = element_text(color = "black", size = 9 * text.scale)) +
scale_y_continuous(limits = c(min, max)) +
geom_rect(aes(ymin=plot.sum.lower, ymax=plot.sum.upper, xmin=0, xmax=Inf), alpha=0.08, fill="lightgreen", color=NA) +
geom_hline(yintercept = plot.sum.effect, color = "darkgreen", linetype="dotted", size=0.5) +
geom_point(shape = 15, size = 4.5, color = "grey") +
geom_linerange(size = 0.9) +
geom_pointrange(shape = 3, size = 0.3)
ggplot(sortdat.es, aes(x = studlab, y = mean, ymin = lower, ymax = upper)) + geom_pointrange() +
geom_text(aes(label = paste(format(round(mean, 2), nsmall = 2), " [", format(round(lower, 2),
nsmall = 2), ";", format(round(upper, 2), nsmall = 2), "] ", "; I2=", format(round(i2, 2),
nsmall = 2), sep = ""), y = Inf), hjust = "inward", size = 2 * text.scale) + geom_hline(yintercept = 1,
color = "blue") + ylab(paste(effect, " (", as.character(lastline$studlab), ")", sep = "")) + ggtitle("Sorted by Effect Size") +
coord_flip() + theme_minimal() + theme(axis.title.y = element_blank(), axis.title.x = element_text(color = "black",
size = 12, face = "bold"), axis.text.y = element_text(color = "black", size = 9 * text.scale),
plot.title = element_text(face = "bold", hjust = 0.5), axis.line.x = element_line(color = "black"),
axis.ticks.x = element_line(color = "black"), axis.text.x = element_text(color = "black", size = 9 *
text.scale)) + scale_y_continuous(trans = "log2", limits = c(min, max)) +
geom_rect(aes(ymin=plot.sum.lower, ymax=plot.sum.upper, xmin=0, xmax=Inf), alpha=0.08, fill="lightgreen", color=NA) + geom_hline(yintercept = plot.sum.effect, color = "darkgreen", linetype="dotted", size=0.5) + geom_pointrange()
library(dmetar)
?InfluenceAnalysis
data(ThirdWave)
# Create 'meta' meta-analysis object
suppressPackageStartupMessages(library(meta))
meta = metagen(TE, seTE, studlab = paste(ThirdWave$Author), data=ThirdWave)
# Run influence analysis; specify to return separate plots when plotted
inf.an = InfluenceAnalysis(meta, return.separate.plots = TRUE)
plot(inf.an)
plot(inf.an, "ES")
plot(inf.an, "I2")
?InfluenceAnalysis
data(ThirdWave)
# Create 'meta' meta-analysis object
suppressPackageStartupMessages(library(meta))
meta = metagen(TE, seTE, studlab = paste(ThirdWave$Author), data=ThirdWave)
# Run influence analysis; specify to return separate plots when plotted
inf.an = InfluenceAnalysis(meta, return.separate.plots = TRUE, random = T)
plot(inf.an, "ES")
?metabin
mbin <- metabin(event.e, n.e, event.c, n.c,
data = Olkin95, subset = year < 1970,
sm = "OR", method = "Inverse", studlab = author)
data("Olkin95")
mbin <- metabin(event.e, n.e, event.c, n.c,
data = Olkin95, subset = year < 1970,
sm = "OR", method = "Inverse", studlab = author)
data("Olkin95")
mbin <- metabin(event.e, n.e, event.c, n.c,
data = Olkin95, subset = year < 1970,
sm = "OR", method = "Inverse", studlab = author)
ia1 <- InfluenceAnalysis(mbin)
plot(ia1, "ES")
plot(ia2, "I2")
plot(ia1, "I2")
?metaprop
m1 <- metaprop(4:1, 10 * 1:4, method = "Inverse")
ia2 <- InfluenceAnalysis(ia2)
m1 <- metaprop(4:1, 10 * 1:4, method = "Inverse")
ia2 <- InfluenceAnalysis(m1)
plot(ia2, "ES")
plot(ia2, "I2")
?metarate
m.ir <- metarate(4:1, c(10, 20, 30, 40), sm = "IR")
m.ir <- metarate(4:1, c(10, 20, 30, 40), sm = "IR")
ia3 <- InfluenceAnalysis(m.ir)
plot(ia3, "ES")
m.ir
m.ir <- metarate(4:1, c(10, 20, 30, 40), sm = "IRLN")
ia3 <- InfluenceAnalysis(m.ir)
plot(ia3, "ES")
?metacont
data(Fleiss93cont)
mc <- metacont(n.e, mean.e, sd.e, n.c, mean.c, sd.c,
data = Fleiss93cont, sm = "SMD")
plot(ia3, "I2")
library(dmetar)
data("Olkin95")
mbin <- metabin(event.e, n.e, event.c, n.c,
data = Olkin95, subset = year < 1970,
sm = "OR", method = "Inverse", studlab = author)
ia1 <- InfluenceAnalysis(mbin)
plot(ia1, "ES")
plot(ia1, "I2")
library(dmetar)
data("Olkin95")
mbin <- metabin(event.e, n.e, event.c, n.c,
data = Olkin95, subset = year < 1970,
sm = "OR", method = "Inverse", studlab = author)
ia1 <- InfluenceAnalysis(mbin)
plot(ia1, "ES")
library(dmetar)
data("Olkin95")
mbin <- metabin(event.e, n.e, event.c, n.c,
data = Olkin95, subset = year < 1970,
sm = "OR", method = "Inverse", studlab = author)
ia1 <- InfluenceAnalysis(mbin)
plot(ia1, "ES")
data("Olkin95")
data("DepressionMortality")
mbin <- metabin(event.e, n.e, event.c, n.c,
data = DepressionMortality,
sm = "OR", method = "Inverse", studlab = author)
ia1 <- InfluenceAnalysis(mbin)
plot(ia1, "ES")
mbin
DepressionMortality$author
data("Olkin95")
data("DepressionMortality")
DepressionMortality$author[16] <- "Thomas et al., 1992 (I)"
mbin <- metabin(event.e, n.e, event.c, n.c,
data = DepressionMortality,
sm = "OR", method = "Inverse", studlab = author)
ia1 <- InfluenceAnalysis(mbin)
plot(ia1, "ES")
ia1
plot(ia1, "I2")
library(dmetar)
data("Olkin95")
data("DepressionMortality")
DepressionMortality$author[16] <- "Thomas et al., 1992 (I)"
mbin <- metabin(event.e, n.e, event.c, n.c,
data = DepressionMortality,
sm = "OR", method = "Inverse", studlab = author)
ia1 <- InfluenceAnalysis(mbin)
plot(ia1, "ES")
plot(ia1, "ES")
plot(ia1, "I2")
data("DepressionMortality")
x <- mbin
duplicated(x$studlab)
x$studlab
data("DepressionMortality")
mbin <- metabin(event.e, n.e, event.c, n.c,
data = DepressionMortality,
sm = "OR", method = "Inverse", studlab = author)
x <- mbin
duplicated(x$studlab)
?duplicated
duplicated(x$studlab)
x$studlab
x$studlab[duplicated(x$studlab)]
make.unique(x$studlab)
make.unique(x$studlab)
library(dmetar)
pkgdown::build_site()
load("~/Documents/R/meta-book/data/res_gosh.rda")
data = res.gosh
km = TRUE
db = TRUE
gmm = TRUE
km.params = list(centers = 3,
iter.max = 10, nstart = 1,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen"),
trace = FALSE)
db.params = list(eps = 0.15, MinPts = 5,
method = c("hybrid", "raw", "dist"))
gmm.params = list(G = NULL, modelNames = NULL,
prior = NULL, control = emControl(),
initialization = list(hcPairs = NULL,
subset = NULL,
noise = NULL),
Vinv = NULL, warn = mclust.options("warn"),
x = NULL, verbose = FALSE)
library(grid)
library(gridExtra)
library(fpc)
library(mclust)
gmm.params = list(G = NULL, modelNames = NULL,
prior = NULL, control = emControl(),
initialization = list(hcPairs = NULL,
subset = NULL,
noise = NULL),
Vinv = NULL, warn = mclust.options("warn"),
x = NULL, verbose = FALSE)
seed = 123
verbose = TRUE
# Redefine Variables
data = data
sav = data
do.km = km; rm(km)
do.db = db; rm(db)
do.gmm = gmm; rm(gmm)
# set seed
set.seed(seed)
# Check input
if (class(data) != "gosh.rma"){
stop("Argument 'data' provided does not have class 'gosh.rma'.")
}
if (do.km == FALSE & do.db == FALSE & do.gmm == FALSE){
stop("At least one of 'km', 'db', or 'gmm' must be set to TRUE.")
}
# Start loading bar
if (verbose == TRUE){
cat(" ", "\n", "Perform Clustering...", "\n")
cat(" |")
}
# Create full dataset from gosh output
dat.full = sav$res[complete.cases(sav$res),]
dat.full = cbind(dat.full, sav$incl[complete.cases(sav$res),])
# Create dataset for k-Means
dat.km = data.frame(scale(dat.full$I2, center = TRUE, scale = TRUE),
scale(dat.full$estimate, center = TRUE,
scale = TRUE))
colnames(dat.km) = c("I2", "estimate")
# Create dataset for DBSCAN
# DBSCAN can become too computationally intensive
# for very large GOSH data.  For N_gosh > 10.000, N = 10.000 data points are
# therefore randomly sampled.
if (nrow(dat.full) < 10000) {
dat.db.full = dat.full
} else {
dat.db.full = dat.full[sample(1:nrow(dat.full), 10000), ]  #Sample 10.000 rows
}
dat.db = data.frame(scale(dat.db.full$I2, center = TRUE, scale = TRUE),
scale(dat.db.full$estimate, center = TRUE, scale = TRUE))
colnames(dat.db) = c("I2", "estimate")
if (verbose == TRUE){
cat("==========")
}
# K-Means
km.params$x = dat.km
do.call(stats::kmeans, km.params)
km = do.call(stats::kmeans, km.params)
# Only use 5000 rows for plotting to increase speed
if (length(as.numeric(km$cluster)) > 5000){
km.plot.mask = sample(1:length(as.numeric(km$cluster)), 5000)
km.plot = km
km.plot$cluster = km$cluster[km.plot.mask]
dat.km.plot = dat.km[km.plot.mask,]
} else {
km.plot = km
dat.km.plot = dat.km
}
levels.km = unique(km.plot$cluster)[order(unique(km.plot$cluster))]
dat.km.plot$cluster = factor(km.plot$cluster, levels = levels.km)
km.clusterplot = ggplot(data = dat.km.plot,
aes(x = estimate, y = I2, color = cluster)) +
geom_point(cex = 0.5, alpha = 0.8) +
ylab(expression(italic(I)^2~(z-score))) +
xlab("Effect Size (z-score)") +
theme_minimal() +
ggtitle("K-means Algorithm") +
labs(color = "Cluster")
# DBSCAN
db.params$data = dat.db
db = do.call(fpc::dbscan, db.params)
# Only use 5000 rows for plotting to increase speed
if (length(as.numeric(db$cluster)) > 5000){
db.plot.mask = sample(1:length(as.numeric(db$cluster)), 5000)
db.plot = db
db.plot$cluster = db$cluster[db.plot.mask]
dat.db.plot = dat.db[db.plot.mask,]
} else {
db.plot = db
dat.db.plot = dat.db
}
if (verbose == TRUE){
cat("==========")
}
levels.db = unique(db.plot$cluster)[order(unique(db.plot$cluster))]
dat.db.plot$cluster = factor(db.plot$cluster, levels = levels.db)
levels(dat.db.plot$cluster)[levels(dat.db.plot$cluster) == "0"] = "Outlier"
color.db = rainbow(nlevels(dat.db.plot$cluster))
color.db[1] = "#000000"
db.clusterplot = ggplot(data = dat.db.plot,
aes(x = estimate, y = I2, color = cluster)) +
geom_point(cex = 0.5, alpha = 0.7) +
ylab(expression(italic(I)^2~(z-score))) +
xlab("Effect Size (z-score)") +
theme_minimal() +
ggtitle("DBSCAN Algorithm (black dots are outliers)") +
scale_color_manual(values = color.db) +
labs(color = "Cluster")
library(ggplot2)
# Redefine Variables
data = data
sav = data
do.km = km; rm(km)
do.db = db; rm(db)
do.gmm = gmm; rm(gmm)
# set seed
set.seed(seed)
# Check input
if (class(data) != "gosh.rma"){
stop("Argument 'data' provided does not have class 'gosh.rma'.")
}
if (do.km == FALSE & do.db == FALSE & do.gmm == FALSE){
stop("At least one of 'km', 'db', or 'gmm' must be set to TRUE.")
}
# Start loading bar
if (verbose == TRUE){
cat(" ", "\n", "Perform Clustering...", "\n")
cat(" |")
}
# Create full dataset from gosh output
dat.full = sav$res[complete.cases(sav$res),]
dat.full = cbind(dat.full, sav$incl[complete.cases(sav$res),])
# Create dataset for k-Means
dat.km = data.frame(scale(dat.full$I2, center = TRUE, scale = TRUE),
scale(dat.full$estimate, center = TRUE,
scale = TRUE))
colnames(dat.km) = c("I2", "estimate")
# Create dataset for DBSCAN
# DBSCAN can become too computationally intensive
# for very large GOSH data.  For N_gosh > 10.000, N = 10.000 data points are
# therefore randomly sampled.
if (nrow(dat.full) < 10000) {
dat.db.full = dat.full
} else {
dat.db.full = dat.full[sample(1:nrow(dat.full), 10000), ]  #Sample 10.000 rows
}
dat.db = data.frame(scale(dat.db.full$I2, center = TRUE, scale = TRUE),
scale(dat.db.full$estimate, center = TRUE, scale = TRUE))
colnames(dat.db) = c("I2", "estimate")
if (verbose == TRUE){
cat("==========")
}
# K-Means
km.params$x = dat.km
do.call(stats::kmeans, km.params)
km = do.call(stats::kmeans, km.params)
# Only use 5000 rows for plotting to increase speed
if (length(as.numeric(km$cluster)) > 5000){
km.plot.mask = sample(1:length(as.numeric(km$cluster)), 5000)
km.plot = km
km.plot$cluster = km$cluster[km.plot.mask]
dat.km.plot = dat.km[km.plot.mask,]
} else {
km.plot = km
dat.km.plot = dat.km
}
levels.km = unique(km.plot$cluster)[order(unique(km.plot$cluster))]
dat.km.plot$cluster = factor(km.plot$cluster, levels = levels.km)
km.clusterplot = ggplot(data = dat.km.plot,
aes(x = estimate, y = I2, color = cluster)) +
geom_point(cex = 0.5, alpha = 0.8) +
ylab(expression(italic(I)^2~(z-score))) +
xlab("Effect Size (z-score)") +
theme_minimal() +
ggtitle("K-means Algorithm") +
labs(color = "Cluster")
# DBSCAN
db.params$data = dat.db
db = do.call(fpc::dbscan, db.params)
# Only use 5000 rows for plotting to increase speed
if (length(as.numeric(db$cluster)) > 5000){
db.plot.mask = sample(1:length(as.numeric(db$cluster)), 5000)
db.plot = db
db.plot$cluster = db$cluster[db.plot.mask]
dat.db.plot = dat.db[db.plot.mask,]
} else {
db.plot = db
dat.db.plot = dat.db
}
if (verbose == TRUE){
cat("==========")
}
levels.db = unique(db.plot$cluster)[order(unique(db.plot$cluster))]
dat.db.plot$cluster = factor(db.plot$cluster, levels = levels.db)
levels(dat.db.plot$cluster)[levels(dat.db.plot$cluster) == "0"] = "Outlier"
color.db = rainbow(nlevels(dat.db.plot$cluster))
color.db[1] = "#000000"
db.clusterplot = ggplot(data = dat.db.plot,
aes(x = estimate, y = I2, color = cluster)) +
geom_point(cex = 0.5, alpha = 0.7) +
ylab(expression(italic(I)^2~(z-score))) +
xlab("Effect Size (z-score)") +
theme_minimal() +
ggtitle("DBSCAN Algorithm (black dots are outliers)") +
scale_color_manual(values = color.db) +
labs(color = "Cluster")
# GMM
# Use same data as used for DBSCAN
dat.gmm.full = dat.db.full
dat.gmm = dat.db
gmm.params$data = dat.gmm
# Search for optimal solution
gmm.bic = do.call(mclust::mclustBIC, gmm.params)
gmm = mclust::Mclust(data = dat.gmm, x = gmm.bic)
gmm
# Only use 5000 rows for plotting to increase speed
if (length(as.numeric(gmm$classification)) > 5000){
gmm.plot.mask = sample(1:length(as.numeric(gmm$classification)), 5000)
dat.gmm.plot = dat.gmm[gmm.plot.mask,]
dat.gmm.plot$cluster = gmm@cluster[gmm.plot.mask]
} else {
dat.gmm.plot = dat.gmm
dat.gmm.plot$cluster = gmm$classification
}
gmm
gmm@classification
?Mclust
summary(gmm)
gmm.bic
predict.Mclust(gmm, gmm.bic)
predict.Mclust(gmm)
predict.Mclust(gmm)$classification
dat.gmm
# Only use 5000 rows for plotting to increase speed
if (length(as.numeric(gmm$classification)) > 5000){
gmm.plot.mask = sample(1:length(as.numeric(gmm$classification)), 5000)
dat.gmm.plot = dat.gmm[gmm.plot.mask,]
dat.gmm.plot$cluster = predict.Mclust(gmm)$classification[gmm.plot.mask]
} else {
dat.gmm.plot = dat.gmm
dat.gmm.plot$cluster = predict.Mclust(gmm)$classification
}
levels.gmm = unique(dat.gmm.plot$cluster)[order(unique(dat.gmm.plot$cluster))]
dat.gmm.plot$cluster = factor(dat.gmm.plot$cluster, levels = levels.gmm)
gmm.clusterplot = ggplot(data = dat.gmm.plot,
aes(x = estimate, y = I2, color = cluster)) +
geom_point(cex = 0.5, alpha = 0.8) +
ylab(expression(italic(I)^2~(z-score))) +
xlab("Effect Size (z-score)") +
theme_minimal() +
ggtitle("Gaussian Mixture Model") +
labs(color = "Cluster")
gmm.clusterplot
library(dmetar)
