"Allocation_concealment" = c("low", "high", "high", "uc", "high"),
"Randomization" = c("low", "high", "miss", "low", "high"),
"Sequence_generation" = c("low", "high", "uc", "uc", "high"),
"ITT.Analyses" = c("low", "high", "uc", "uc", "uc"),
"Selective_outcome_reporting" = c("low", "high", "high", "high", "uc")
)
rob.summary(data2, name.high = "high", name.unclear = "uc", name.low = "low",
name.missing = "miss", studies = data2$study, table = TRUE)
library(dmetar)
data2 = data.frame(
"study" = c("Higgins et al., 2011", "Borenstein et al., 2008", "Holm, 1971",
"Zajonc et al., 2005", "Cuijpers, 2014"),
"Allocation_concealment" = c("low", "high", "high", "uc", "high"),
"Randomization" = c("low", "high", "miss", "low", "high"),
"Sequence_generation" = c("low", "high", "uc", "uc", "high"),
"ITT.Analyses" = c("low", "high", "uc", "uc", "uc"),
"Selective_outcome_reporting" = c("low", "high", "high", "high", "uc")
)
rob.summary(data2, name.high = "high", name.unclear = "uc", name.low = "low",
name.missing = "miss", studies = data2$study, table = TRUE)
data2
data = data2
name.high = "high"; name.unclear = "uc"; name.low = "low";
name.missing = "miss"; studies = data2$study; table = TRUE
# Class Checks
if (class(data) != "data.frame"){
stop("'data' must be of class 'data.frame'.")
}
if (missing(name.missing)){
# Only select columns with RoB data
colnames.rob = character()
for (i in 1:ncol(data)){
vect = as.character(data[,i])
for (j in 1:length(data[,i])){
if (vect[j] %in% c(name.high, name.unclear, name.low)){
colnames.rob[i] = TRUE
} else {
colnames.rob[i] = FALSE
message(cat("Column '", colnames(data)[i],
"' removed from plot because it did not contain the specified RoB ratings (only). \n",
sep=""))
break
}
}
}
# Use mask: rob data
rob = data[ , as.logical(colnames.rob)]
# Relevel for plot
for (i in 1:ncol(rob)){
rob[,i] = as.character(rob[,i])
rob[rob[,i]==name.high,i] = "High"
rob[rob[,i]==name.unclear,i] = "Unclear"
rob[rob[,i]==name.low,i] = "Low"
}
}
robby = rob
robby = data.frame(study = studies,
condition = rep(colnames(robby), each = length(studies)),
measurement = unlist(robby))
rownames(robby) = NULL
robby$condition = gsub("_"," ", robby$condition)
robby$condition = gsub("-"," ", robby$condition)
robby$condition = gsub("\\."," ", robby$condition)
robby[robby$measurement=="Low", "measurement"] = "+"
robby[robby$measurement=="Unclear", "measurement"] = "?"
robby[robby$measurement=="High", "measurement"] = "-"
rob = data[ , as.logical(colnames.rob)]
colnames.rob = character()
for (i in 1:ncol(data)){
vect = as.character(data[,i])
for (j in 1:length(data[,i])){
if (vect[j] %in% c(name.high, name.unclear, name.low)){
colnames.rob[i] = TRUE
} else {
colnames.rob[i] = FALSE
message(cat("Column '", colnames(data)[i],
"' removed from plot because it did not contain the specified RoB ratings (only). \n",
sep=""))
break
}
}
}
# Use mask: rob data
rob = data[ , as.logical(colnames.rob)]
# Relevel for plot
for (i in 1:ncol(rob)){
rob[,i] = as.character(rob[,i])
rob[rob[,i]==name.high,i] = "High"
rob[rob[,i]==name.unclear,i] = "Unclear"
rob[rob[,i]==name.low,i] = "Low"
}
rob
robby = rob
robby = data.frame(study = studies,
condition = rep(colnames(robby), each = length(studies)),
measurement = unlist(robby))
rownames(robby) = NULL
robby$condition = gsub("_"," ", robby$condition)
robby$condition = gsub("-"," ", robby$condition)
robby$condition = gsub("\\."," ", robby$condition)
robby[robby$measurement=="Low", "measurement"] = "+"
robby[robby$measurement=="Unclear", "measurement"] = "?"
robby[robby$measurement=="High", "measurement"] = "-"
robby$study = factor(robby$study,
levels = unique(studies)[rev(order(unique(robby$study)))])
ggplot(data = robby, aes(y = study, x = condition)) +
geom_tile(color="black", fill="white", size = 0.8) +
geom_point(aes(color=as.factor(measurement)), size=20) +
geom_text(aes(label = measurement), size = 8) +
scale_x_discrete(position = "top") +
scale_color_manual(values = c("?" = "#E2DF07",
"-" = "#BF0000",
"+" = "#02C100")) +
theme_minimal() +
coord_equal() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_text(size = 15, color = "black"),
axis.text.x = element_text(size = 13, color = "black", angle = 90, hjust=0),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
library(dmetar)
data2 = data.frame(
"study" = c("Higgins et al., 2011", "Borenstein et al., 2008", "Holm, 1971",
"Zajonc et al., 2005", "Cuijpers, 2014"),
"Allocation_concealment" = c("low", "high", "high", "uc", "high"),
"Randomization" = c("low", "high", "miss", "low", "high"),
"Sequence_generation" = c("low", "high", "uc", "uc", "high"),
"ITT.Analyses" = c("low", "high", "uc", "uc", "uc"),
"Selective_outcome_reporting" = c("low", "high", "high", "high", "uc")
)
rob.summary(data2, name.high = "high", name.unclear = "uc", name.low = "low",
name.missing = "miss", studies = data2$study, table = TRUE)
?desc
rev(mpar.df$comparison)
desc(mpar.df$comparison)
reorder(mpar.df$comparison)
mpar.df$comparison
reorder(mpar.df$comparison, desc(mpar.df$comparison))
?relevel
rev(levels(mpar.df$comparison))
relevel(mpar.df$comparison, rev(levels(mpar.df$comparison)))
factor(mpar.df$comparison, levels = rev(levels(mpar.df$comparison)))
reorder(mpar.df$comparison, desc(mpar.df$comparison)) == factor(mpar.df$comparison, levels = rev(levels(mpar.df$comparison)))
library(dmetar)
pkgdown::build_home()
?build_home
build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_site()
pkgdown::build_home()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
pkgdown::build_site()
if (!require("devtools")) {
install.packages("devtools")
}
devtools::install_github("MathiasHarrer/dmetar")
pkgdown::build_site()
pkgdown::build_articles()
?build_articles
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_site()
pkgdown::build_favicon()
pkgdown::build_favicons()
pkgdown::build_site()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
load("~/Documents/R/dmetar/data/EDPrevention.RData")
str(EDPrevention)
View(data_incidence_ED_IRR)
EatingDisorderPrevention <- data_incidence_ED_IRR
str(EatingDisorderPrevention)
library(meta)
metainc(event.e,
time.e,
event.c,
time.c,
studlab = paste(Author),
data = EatingDisorderPrevention,
sm = "IRR",
method.tau = "PM",
comb.random = TRUE,
comb.fixed = FALSE,
hakn = TRUE,
model.glmm = "UM.RS")
load("~/Documents/R/dmetar/data/edp.RData")
metainc(event.e,
time.e,
event.c,
time.c,
studlab = paste(Author),
data = data_incidence_ED_IRR_combined,
sm = "IRR",
method.tau = "PM",
comb.random = TRUE,
comb.fixed = FALSE,
hakn = TRUE,
model.glmm = "UM.RS")
metainc(event.e,
time.e,
event.c,
time.c,
studlab = paste(Author),
data = data_incidence_ED_IRR_combined,
sm = "IRR",
method.tau = "PM",
comb.random = TRUE,
comb.fixed = FALSE,
hakn = TRUE,
model.glmm = "UM.RS") %>% forest()
library(dplyr)
metainc(event.e,
time.e,
event.c,
time.c,
studlab = paste(Author),
data = data_incidence_ED_IRR_combined,
sm = "IRR",
method.tau = "PM",
comb.random = TRUE,
comb.fixed = FALSE,
hakn = TRUE,
model.glmm = "UM.RS") %>% forest()
EatingDisorderPrevention <- data_incidence_ED_IRR_combined
EatingDisorderPrevention$Author
EatingDisorderPrevention$Author = c("Stice et al., 2013", "Stice et al., 2017a", "Stice et al., 2017b", "Taylor et al., 2006", "Taylor et al., 2016")
EatingDisorderPrevention$event.e
EatingDisorderPrevention$event.e = round(EatingDisorderPrevention$event.e)
EatingDisorderPrevention$event.e
EatingDisorderPrevention$time.e
EatingDisorderPrevention$time.e = round(EatingDisorderPrevention$time.e)
EatingDisorderPrevention$event.c
EatingDisorderPrevention$event.c = round(EatingDisorderPrevention$event.c)
EatingDisorderPrevention$time.c = round(EatingDisorderPrevention$time.c)
EatingDisorderPrevention
metainc(event.e,
time.e,
event.c,
time.c,
studlab = paste(Author),
data = EatingDisorderPrevention,
sm = "IRR",
method.tau = "PM",
comb.random = TRUE,
comb.fixed = FALSE,
hakn = TRUE,
model.glmm = "UM.RS") %>% forest()
class(EatingDisorderPrevention)
class(EatingDisorderPrevention) = "data.frame"
EatingDisorderPrevention
save(EatingDisorderPrevention, file = "data/EatingDisorderPrevention.rda")
?metainc
EatingDisorderPrevention$event.e
str(EatingDisorderPrevention)
library(metafor)
dat.bangertdrowns2004
?dat.bangertdrowns2004
devtools::document()
library(dmetar)
dmetar::EatingDisorderPrevention
?EatingDisorderPrevention
data("EatingDisorderPrevention")
library(readxl)
DepressionMortality <- read_excel("data/DepressionMortality.xlsx")
View(DepressionMortality)
class(DepressionMortality)
class(DepressionMortality) = "data.frame"
DepressionMortality
library(meta)
metabin(event.e, n.e, event.c, n.c, studlab = author, data = DepressionMortality)
metabin(event.e, n.e, event.c, n.c, studlab = author, data = DepressionMortality) %>% forest(sortvar=TE)
library(dplyr)
metabin(event.e, n.e, event.c, n.c, studlab = author, data = DepressionMortality) %>% forest(sortvar=TE)
library(readxl)
DepressionMortality <- read_excel("data/DepressionMortality.xlsx")
View(DepressionMortality)
class(DepressionMortality) = "data.frame"
DepressionMortality
DepressionMortality$country
DepressionMortality$author
DepressionMortality$event.e
DepressionMortality$n.e
DepressionMortality$event.c
DepressionMortality$n.c
save(DepressionMortality, file = "data/DepressionMortality.rda")
library(readxl)
HealthWellbeing <- read_excel("data/HealthWellbeing.xlsx")
View(HealthWellbeing)
class(HealthWellbeing)
class(HealthWellbeing) = "data.frame"
HealthWellbeing
HealthWellbeing %>% str()
metacor(cor, n, studlab = author, data = HealthWellbeing)
library(dmetar)
metacor(cor, n, studlab = author, data = HealthWellbeing) %>% find.outliers()
metacor(cor, n, studlab = author, data = HealthWellbeing) %>% find.outliers() -> fo
fo$m.fixed
fo$m.fixed %>% find.outliers()
metacor(cor, n, studlab = author, data = HealthWellbeing[HealthWellbeing$population == "general population",])
metacor(cor, n, studlab = author, data = HealthWellbeing[HealthWellbeing$population == "chronic condition",])
metacor(cor, n, studlab = author, data = HealthWellbeing[HealthWellbeing$population == "chronic condition",]) %>% forest()
metacor(cor, n, studlab = author, data = HealthWellbeing[HealthWellbeing$population == "chronic condition",]) %>% forest(sortvar = TE)
save(HealthWellbeing, file = "data/HealthWellbeing.rda")
HealthWellbeing
R.version
R.version$version.string
if (!require("devtools")) {
install.packages("devtools")
}
devtools::install_github("MathiasHarrer/MetaPsyR")
library(MetaPsyR)
data("DepPsychDB")
DepPsychDB$mean_age
complete.cases(DepPsychDB$mean_age
)
complete.cases(DepPsychDB$mean_age)
DepPsychDB[complete.cases(DepPsychDB$mean_age),]
DepPsychDB[complete.cases(DepPsychDB$mean_age),] -> PsychotherapyAge
glimpse(PychotherapyAge)
PsychotherapyAge
PsychotherapyAge %>% glimpse()
PsychotherapyAge %>% select(study, n, mean_age)
?metamean
library(readxl)
BdiScores <- read_excel("data/BdiScores.xlsx")
View(BdiScores)
BdiScores
class(BdiScores)
class(BdiScores) = "data.frame"
BdiScores
metamean(n, mean, sd, data = BdiScores, studlab = author)
metamean(n, mean, sd, data = BdiScores, studlab = author) %>% forest()
BdiScores$author
BdiScores[-4,]
BdiScores[-4,] -> BdiScores
metamean(n, mean, sd, data = BdiScores, studlab = author) %>% forest()
save(BdiScores, file = "data/BdiScores.rda")
?metaprop
library(readxl)
OpioidMisuse <- read_excel("data/OpioidMisuse.xlsx")
View(OpioidMisuse)
OpioidMisuse
metaprop(event, n, studlab = author, data = OpioidMisuse)
metaprop(event, n, studlab = author, data = OpioidMisuse) %>% forest()
metaprop(event, n, studlab = author, data = OpioidMisuse) %>% find.outliers() -> fo
fo
save(OpioidMisuse, file = "data/OpioidMisuse.rda")
?metacor
library(meta)
?metacor
library(readxl)
Chernobyl <- read_excel("data/Chernobyl.xlsx")
View(Chernobyl)
class(Chernobyl) = "data.frame"
str(Chernobyl)
metacor(cor, n, studlab = author, data = Chernobyl)
library(metafor)
?rma.mv
escalc(measure="OR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
?escalc
escalc(m1i = 10, sd1i = 5, n1i = 50, m2i = 15, sd2i = 5, n2i = 50)
escalc(m1i = 10, sd1i = 5, n1i = 50, m2i = 15, sd2i = 5, n2i = 50, measure = "SMD")
library(esc)
esc_mean_sd(10, 5, 50, 15, 5, 50, es.type = "d")
esc_mean_sd(10, 5, 50, 15, 5, 50, es.type = "g")
rma.mv(yi = TE, sei = seTE, data = ThirdWave)
library(dmetar)
esc_mean_sd(10, 5, 50, 15, 5, 50, es.type = "g")
rma.mv(yi = TE, sei = seTE, data = ThirdWave)
rma.mv(yi = TE, sei = seTE, data = ThirdWave)
data("ThirdWave")
rma.mv(yi = TE, sei = seTE, data = ThirdWave)
ThirdWave
rma.mv(yi = TE, V = seTE, data = ThirdWave)
sqrt(0.0450)/100
?rma.uni
?escalc
escalc(measure = "ZCOR", ri = Chernobyl$cor, ni = Chernobyl$n)
cbind(Chernobyl, escalc(measure = "ZCOR", ri = Chernobyl$cor, ni = Chernobyl$n))
cbind(Chernobyl, escalc(measure = "ZCOR", ri = Chernobyl$cor, ni = Chernobyl$n)) -> Chernobyl
colnames(Chernobyl)
colnames(Chernobyl)[5:6]
colnames(Chernobyl)[5:6] = c("z", "var.z")
Chernobyl$se.z = 1/sqrt(Chernobyl$n-3)
Chernobyl
Chernobyl$radiation
library(dplyr)
Chernobyl %>% select(author, cor, n, z, se.z, var.z, radiation)
Chernobyl %>% select(author, cor, n, z, se.z, var.z, radiation) -> Chernobyl
Chernobyl$es.id = paste("id_", 1:33)
Chernobyl$es.id
Chernobyl$es.id = paste0("id_", 1:33)
Chernobyl$es.id
full.model <- rma.mv(z,
var.z,
random = ~ 1 | author/es_id,
tdist = TRUE,
data = Chernobyl,
method = "REML")
Chernobyl
full.model <- rma.mv(z,
var.z,
random = ~ 1 | author/es.id,
tdist = TRUE,
data = Chernobyl,
method = "REML")
full.model
summary(full.model)
mlm.variance.distribution(x = full.model)
full.model <- rma.mv(z,
var.z,
random = ~ 1 | author/es.id,
tdist = TRUE,
data = Chernobyl,
method = "REML",)
full.model <- rma.mv(z,
var.z,
random = ~ 1 | author/es.id,
tdist = TRUE,
data = Chernobyl,
method = "REML", sigma = c(NA, 0))
full.model2 <- rma.mv(z,
var.z,
random = ~ 1 | author/es.id,
tdist = TRUE,
data = Chernobyl,
method = "REML", sigma = c(NA, 0))
full.model <- rma.mv(z,
var.z,
random = ~ 1 | author/es.id,
tdist = TRUE,
data = Chernobyl,
method = "REML")
anova(full.model, full.model2)
full.model3 <- rma.mv(z,
var.z,
random = ~ 1 | author/es.id,
tdist = TRUE,
data = Chernobyl,
method = "REML", sigma = c(0, NA))
anova(full.model, full.model3)
save(Chernobyl, file = "data/Chernobyl.rda")
load("~/Documents/R/dmetar/data/HealthWellbeing.rda")
View(HealthWellbeing)
load("~/Documents/R/dmetar/data/Chernobyl.rda")
View(Chernobyl)
?forest.subgroup.analysis.mixed.effects
View(Chernobyl)
Chernobyl %>% str()
str(Chernobyl)
Chernobyl$z = as.numeric(Chernobyl$z)
str(Chernobyl)
save(Chernobyl, file = "data/Chernobyl.rda")
load("~/Documents/R/dmetar/data/BdiScores.rda")
View(BdiScores)
?metamean
library(dplyr)
BdiScores = BdiScores %>% select(author, n, mean, sd, mean.hamd, sd.hamd)
BdiScores
str(BdiScores)
save(BdiScores, file = "data/BdiScores.rda")
load("~/Documents/R/dmetar/data/DepressionMortality.rda")
View(DepressionMortality)
str(DepressionMortality)
str(HealthWellbeing)
load("~/Documents/R/dmetar/data/OpioidMisuse.rda")
View(OpioidMisuse)
str(OpioidMisuse)
OpioidMisuse = as.data.frame(OpioidMisuse)
str(OpioidMisuse)
save(OpioidMisuse, file = "data/OpioidMisuse.rda")
devtools::document()
?BdiScores
?BdiScores
?Chernobyl
?DepressionMortality
?HealthWellbeing
?OpioidMisuse
devtools::document()
?OpioidMisuse
devtools::check()
library(dmetar)
ThirdWave
data("ThirdWave")
ThirdWave
data("OpioidMisuse")
OpioidMisuse
ThirdWave = as.data.frame(ThirdWave)
ThirdWave
save(ThirdWave, file = "data/ThirdWave.rda")
data(SuicidePrevention)
data(HealthWellbeing)
load("~/Documents/R/dmetar/data/SuicidePrevention.rda")
str(SuicidePrevention)
library(meta)
metacont(n.e, mean.e, sd.e, n.c, mean.c, sd.c, studlab = author, data = SuicidePrevention)
metacont(n.e, mean.e, sd.e, n.c, mean.c, sd.c, studlab = author, data = SuicidePrevention, sm = "SMD")
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
